Prerequisites
-------------
1. Install the dependencies:
   - ffmpeg binaries (set in PATH) from http://ffmpeg.org/
   - PostgreSQL from http://www.postgresql.org/
   - Python (2.5 or later, not 3.0+) from http://python.org/
   - SQLAlchemy (0.5.5) from http://www.sqlalchemy.org/
       (If using Windows, independently install win-psycopg (2.2.1) too, from 
        http://www.stickpeople.com/projects/python/win-psycopg/)
   - NumPy (1.3) from http://numpy.scipy.org/
   - PyTables from http://www.pytables.org/
   - eyeD3 (0.6.17) from http://eyed3.nicfit.net/
   - PyGreSQL from http://www.pygresql.org/
       (Optional: Needed for interfacing with musicbrainz)
   - TagPy from http://pypi.python.org/pypi/tagpy
       (Optional: used to extract metadata within tracklist-generation scripts)
        *not yet tested on Windows. Tips:
        Boost.Pyhon win: http://www.boost.org/doc/libs/1_41_0/libs/python/doc/building.html
        taglib winports 1.3 @ http://sourceforge.net/projects/taglib-winport/ or 1.4 @ 
        http://sageshome.net/oss/taglib-win32.php

   Packages required for the webapp (optional):
   - TurboGears 1.1: http://www.turbogears.org/ 
   - psycopg: http://initd.org/
       (psycopg2 is actually needed for SQLAlchemy too,
        however it should be included in the SQLAlchemy package.)
   - matplotlib from http://matplotlib.sourceforge.net
       (Optional: Used for plotting features in the web app)
   
   -----------------------------------------------------------------------------
   On Debian (and probably Ubuntu), you can get all of these dependencies by running:
   apt-get install postgresql ffmpeg python-sqlalchemy python-pygresql \
                   python-numpy python-eyed3 python-tagpy python-tables python-matplotlib

   And for the (optional) web app:
   apt-get install python-psycopg2 python-tgmochikit python-setuptools

   apt-get install python-turbogears python-pastescript \
                   python-formencode python-elementtree python-turbokid

   Note that the version of turbogears in current Debian stable is too
   old, so you will need to use apt-pinning (see
   http://wiki.debian.org/AptPreferences) to get a more recent version
   from testing by changing "apt-get install" to "apt-get install -t testing"
   in the previous command.

   You will also have to install TGFastData
   (http://pypi.python.org/pypi/TGFastData):
    easy_install TGFastData
       

2. Create the database and set up a user to manage the database by
   running following commands as the postgres super user (probably
   'postgres'):
   createdb gordon_db
   createuser gordon -P


Gordon setup
------------
0. Add the project directory to your PYTHONPATH.

1. Copy gordon/db/config.py.default to gordon/db/config.py and fill in
   the details of your local configuration. 

2. Run gordon/db/gordon_initialize.py to build the database tables.

3. Use gordon/db/audio_intake.py or gordon/db/audio_intake_from_tracklist.py
   to import music into the database.

4. Create a local copy of the musicbrainz database using
   gordon/db/mbrainz_import.py

   This involves checking out the mb_server SVN repository, filling in
   some configuration details, then downloading a few gigabytes of the
   musicbrainz database dump and loading it into your local postgres
   database.  Follow the instructions in the script.  The process is
   mostly automated.

   mb_server depends on a number of perl modules that you may have to
   install.  On Ubuntu 9.10, you can install them by running:

   apt-get install libdbd-pg-perl libdbi-perl libstring-shellquote-perl \
                   liblwp-useragent-determined-perl

5. Resolve metadata against musicbrainz using gordon/db/mbrainz_resolver.py


Web app setup (optional)
------------------------
1. Run gordon/web/gordonweb/initialize_db.py to initialize the webapp
   database tables.

2. Copy gordon/web/dev.cfg.default to gordon/web/dev.cfg
   Copy gordon/web/app.cfg.default to gordon/web/app.cfg
   Edit both configuration files to reflect settings in gordon/config.py

3. Run gordon/web/start-gordonweb.py gordon/web/dev.cfg to start it up.
   Once everything works, you can start using gordon/web/app.cfg for a
   faster server.

4. Open a web browser and go to town!
