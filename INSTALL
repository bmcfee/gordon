Prerequisites
-------------
1. Install the dependencies (versions in parenthesis are the last tested):

   - ffmpeg binaries [set in PATH] from http://ffmpeg.org/
   
   - Python from http://python.org/   (2.5 most tested, 2.6 0K, 2.7 should work)
   - PostgreSQL from http://www.postgresql.org/
   
   + SQLAlchemy from http://www.sqlalchemy.org/                (0.5.5 preferred)
     * requires psycopg2                                          (2.2.1 tested)
   + NumPy from http://numpy.scipy.org/                                  (1.4 +)
   + PyTables from http://www.pytables.org/ [required to cache signal features]
     * requires numpexpr                                                 (1.3.1)
     * requires HDF5 binaries from http://www.hdfgroup.org/HDF5/           (1.8)
   + eyeD3 from http://eyed3.nicfit.net/                                (0.6.17)
   + TagPy from http://pypi.python.org/pypi/tagpy
     (recommended: to extract metadata with tracklist-generation scripts)
     * requires TagLib library
     * requires Boost.Python library
   + PyGreSQL from http://www.pygresql.org/
     (Optional: for interfacing with MusicBrainz)
     * You will also need a number of perl modules to setup a MB server (see 4.)
   + matplotlib from http://matplotlib.sourceforge.net
     (recommended: used for audio feature extraction caching)
   
   Packages required for the web app (optional):
   - TurboGears from http://www.turbogears.org/ 
   + psycopg from http://initd.org/ 
     (psycopg2 is actually needed for SQL Alchemy too,
      however it shuold come embedded in the sqlalchemy package.)
   + TGFastData from http://pypi.python.org/pypi/TGFastData
   + matplotlib from http://matplotlib.sourceforge.net
     (Optional: used for plotting features in the web app)
     
   Less important optional packages (unused in regular Gordon opperation):
    - scipy            (to write audio files)
    - scikits.audiolab (to write audio files using audiolab)
    - pylab            (to plot audio files)
    

2. Create the database and set up a user to manage the database by running the
   following commands as the postgres linux user (probably 'postgres'):
   createuser gordon -DRSP
   createdb -O gordon gordon_db
   * Windows: You may want to use a graphic manager such as pgAdmin.
   

Gordon setup
------------
1. Copy gordon/db/config.py.default to gordon/db/config.py and fill in
   the details of your local configuration.

2. Run gordon/db/gordon_initialize.py to build the database tables.

3. Use gordon/db/audio_intake.py or gordon/db/audio_intake_from_tracklist.py
   to import music into the database.

4. Create a local copy of the musicbrainz database using
   gordon/db/mbrainz_import.py

   This involves checking out the mb_server SVN repository, filling in
   some configuration details, then downloading a few gigabytes of the
   musicbrainz database dump and loading it into your local postgres
   database.  Follow the instructions in the script.  The process is
   mostly automated.

   mb_server depends on a number of perl modules that you may have to
   install.  On Ubuntu 9.10, you can install them by running:

   apt-get install libdbd-pg-perl libdbi-perl libstring-shellquote-perl \
                   liblwp-useragent-determined-perl

5. Resolve metadata against musicbrainz using gordon/db/mbrainz_resolver.py


Web app setup (optional)
------------------------
1. Run gordon/web/gordonweb/initialize_db.py to initialize the webapp
   database tables.

2. Copy gordon/web/dev.cfg.default to gordon/web/dev.cfg
   Copy gordon/web/app.cfg.default to gordon/web/app.cfg
   Edit both configuration files to reflect settings in gordon/config.py

3. Run gordon/web/start-gordonweb.py gordon/web/dev.cfg to start it up.
   Once everything works, you can start using gordon/web/app.cfg for a
   faster server.

   Optional scripts for using gordonweb as a service are included in:
     gordon/web/tg_gordonweb.fedora (for Fedora and variants)
     gordon/web/tg_gordonweb.debian (for Debian)

4. Open a web browser and go to town!
