Prerequisites
-------------
1. Install the dependencies (versions in parenthesis are the last tested):

   ffmpeg binarie, set in PATH, from http://ffmpeg.org/
   PostgreSQL from http://www.postgresql.org/
   
   Python (2.5/2.6 *Win: 2.6/ActivePython 2.5) from http://python.org/ and python-packages:
   SQLAlchemy (0.5.5 prefered) from http://www.sqlalchemy.org/
     * requires psycopg2 (2.2.1 tested)
     *Win: get @ http://www.stickpeople.com/projects/python/win-psycopg/
   NumPy (1.4) from http://numpy.scipy.org/
   pytables from http://www.pytables.org/ (required to cache signal features in h5 files)
     *Win: auto-installer only available for Python 2.6+
           and requires numexpr (1.3.1 tested)
           untested on ActivePython 2.5
     * requires HDF5 [1.8] from http://www.hdfgroup.org/HDF5/
     * requires PThreads, Win: http://sourceware.org/pthreads-win32/
   eyeD3 (0.6.17) from http://eyed3.nicfit.net/ (this will eventually be replaced with tagpy)
   (recommended) TagPy from http://pypi.python.org/pypi/tagpy *Win: untested
     (used to extract metadata with tracklist-generation scripts)
   (optional) PyGreSQL from http://www.pygresql.org/ (required for interfacing with MusicBrainz)
     * You will also need a number of perl modules to setup a MB server, as detailed below.
   
   (optional) Packages required for the webapp:
   psycopg: http://initd.org/ * psycopg2 is actually needed for SQL Alchemy too,
                              however it shuold come embedded in sqlalchemy.
   TurboGears from http://www.turbogears.org/ 
   TGFastData from http://pypi.python.org/pypi/TGFastData
   
   -----------------------------------------------------------------------------
   On Debian (and probably Ubuntu),                                     Feb 2010
   you can get all of these dependencies by running:
   apt-get install postgresql ffmpeg python-sqlalchemy python-pygresql \
                   python-numpy python-eyed3 python-tagpy python-tables

   And for the (optional) web app:
   apt-get install python-psycopg2 python-tgmochikit python-setuptools

   apt-get install python-turbogears python-pastescript \
                   python-formencode python-elementtree python-turbokid

   Note that the version of turbogears in current Debian stable is too
   old, so you will need to use apt-pinning (see
   http://wiki.debian.org/AptPreferences) to get a more recent version
   from testing by changing "apt-get install" to "apt-get install -t testing"
   in the previous command.

   TGFastData (http://pypi.python.org/pypi/TGFastData):
   easy_install TGFastData
   
   -----------------------------------------------------------------------------
   On Arch Linux run:                                                  July 2010
   pacman -S postgresql python-psycopg2 python-sqlalchemy python-numpy python-eyed3 tagpy
   * This will also install python and setuptools if you didn't have them yet.
   
   You'll need to install PyTables and PyGreSQL separatelly, ie:
   easy_install numexpr (required for pytables) # or you may wget it from AUR to install with pacman
   pacman -S hdf5       (required for pytables)
   easy_install cython  (required for pytables) # also in aur.archlinux.org
   wget python-pytables from AUR, untar, cd, makepkg and pacman -U it; easy_install doesn't work.
   easy_install pygresql # available in AUR
   * You (should now) have setuptools, which provides easy_install.
   
   For the (optional) web app:
   pacman python-psycopg2 ?
   pacman turbogears ?
   easy_install TGFastData ? # AUR ?
   
   -----------------------------------------------------------------------------
   Windows Install Guide
   ...
   
   *We havn't tested the webapp under Windows
   



2. Create the database and set up a user to manage the database by running the
   following commands as the postgres linux user (probably 'postgres'):
   createdb gordon_db
   createuser gordon -P
   
   *Win: You may use a graphic manager such as pgAdmin



Gordon setup
------------
1. Copy gordon/db/config.py.default to gordon/db/config.py and fill in
   the details of your local configuration. *Also, export a PYTHONPATH with
   the project's root dir

2. Run gordon/db/gordon_initialize.py to build the database tables.

3. Use gordon/db/audio_intake(_from_csv).py and metadata .csv files to import 
   music into the database.

4. Create a local copy of the musicbrainz database using
   gordon/db/mbrainz_import.py

   This involves checking out the mb_server SVN repository, filling in
   some configuration details, then downloading a few gigabytes of the
   musicbrainz database dump and loading it into your local postgres
   database.  Follow the instructions in the script.  The process is
   mostly automated.

   mb_server depends on a number of perl modules that you may have to
   install.  On Ubuntu 9.10, you can install them by running:

   apt-get install libdbd-pg-perl libdbi-perl libstring-shellquote-perl \
                   liblwp-useragent-determined-perl

5. Resolve metadata against musicbrainz using gordon/db/mbrainz_resolver.py


Web app setup (optional)
------------------------
1. Run gordon/web/gordonweb/initialize_db.py to initialize the webapp
   database tables.

2. Copy gordon/web/dev.cfg.default to gordon/web/dev.cfg
   Copy gordon/web/app.cfg.default to gordon/web/app.cfg
   Edit both configuration files to reflect settings in gordon/config.py

3. Run gordon/web/start-gordonweb.py gordon/web/dev.cfg to start it up.
   Once everything works, you can start using gordon/web/app.cfg for a
   faster server.

4. Open a web browser and go to town!
